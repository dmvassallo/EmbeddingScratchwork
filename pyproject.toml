[tool.poetry]
name = "embeddingscratchwork"
version = "0.1.0"
description = "Scratch work for embeddings"
authors = [
    "David Vassallo <vassallo.davidm@gmail.com>",
    "Eliah Kagan <degeneracypressure@gmail.com>",
]
license = "0BSD"
readme = "README.md"
homepage = "https://github.com/dmvassallo/EmbeddingScratchwork"
repository = "https://github.com/dmvassallo/EmbeddingScratchwork"
keywords = [
    "embeddings",
    "similarity",
    "vector search",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing",
]
packages = [
    { include = "embed" },
]

[tool.poetry.dependencies]
python = "^3.9"
backoff = "^2.2.1"
blake3 = "^1.0.5"
dulwich = "^0.22.8"
numpy = "^2.0.2"
openai = { extras = ["embeddings"], version = ">=0.28.1,<2.0" }
orjson = "^3.10.18"
requests = "^2.32.4"
safetensors = "^0.5.3"
scipy = "^1.13.1"

[tool.poetry.group.test.dependencies]
attrs = "^25.3.0"
parameterized = "^0.9.0"
pytest = "^8.4.0"
pytest-sugar = "^1.0.0"
subaudit = "^0.1.0"

[tool.poetry.group.lint.dependencies]
flake8 = "^7.2.0"
flake8-pyproject = "^1.2.3"
isort = "^6.0.1"
pylint = "^3.3.7"
pylint-actions = "^0.5.0"
pylint-exit = "^1.2.0"

[tool.poetry.group.notebook.dependencies]
graphviz = "^0.20.3"
ipykernel = "^6.29.5"
ipython = "~8.18.1"
jupyter-collaboration = "^4.0.2"
jupyterlab = "^4.4.3"
nbdime = "^4.0.2"
tabulate = "^0.9.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.flake8]
extend-exclude = [
    ".ipynb_checkpoints/",
    ".venv*/",
    "venv*/",
]

[tool.isort]
atomic = true
force_sort_within_sections = true
include_trailing_comma = true
multi_line_output = 3

[tool.pylint.main]
disable = [
    "consider-using-f-string",
    "too-few-public-methods",
]
extension-pkg-allow-list = [
    "blake3",
    "orjson",
]
load-plugins = [
    "pylint_actions",
]
max-parents = 8

[tool.tox]
legacy_tox_ini = """
    [tox]
    requires = tox>=4
    skip_missing_interpreters = false
    env_list = py{39,310,311,312,313}, flake8, isort

    [testenv]
    description = Run tests
    package = wheel
    allowlist_externals = poetry
    commands_pre =
        poetry export --only=test --output={env_tmp_dir}/requirements_test.txt
        pip install -qr {env_tmp_dir}/requirements_test.txt
    commands =
        pytest --color=yes --force-sugar
    setenv =
        TESTS_CACHE_EMBEDDING_CALLS_IN_MEMORY = yes

    [testenv:flake8]
    description = flake8 lint
    basepython = py313
    commands_pre =
        poetry export --only=lint --output={env_tmp_dir}/requirements_lint.txt
        pip install -qr {env_tmp_dir}/requirements_lint.txt
    commands =
        flake8

    [testenv:isort]
    description = isort check
    basepython = py313
    commands_pre =
        poetry export --only=lint --output={env_tmp_dir}/requirements_lint.txt
        pip install -qr {env_tmp_dir}/requirements_lint.txt
    commands =
        isort --check .
"""
